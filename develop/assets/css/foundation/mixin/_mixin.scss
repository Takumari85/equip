//
// #Mixin
//

// @desc - クリアーフィックスのスタイルを挿入します。
// @prop - 引数$importantに"important"を渡すと`!important`の指定ができます。
// @example scss - Usage
// .foo { @include clearfix; }
// .bar { @include clearfix(important); }
// @example css - CSS output
// .foo:after {
//     content: "";
//     display: block;
//     clear: both;
// }
// .bar:after {
//     content: "" !important;
//     display: block !important;
//     clear: both !important;
// }
@mixin clearfix($important: false) {
  @if ($important == "important") {
    $important: unquote("!important");
  } @else {
    $important: null;
  }
  &:after {
    content: "" $important;
    display: block $important;
    clear: both $important;
  }
}

// @desc - マウスオーバーなどのイベントをまとめて指定します。
// @author - Harry Roberts
// @param {Bool} $self [false] - Whether or not to include current selector
// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
// @example scss - Usage
// .foo {
//   @include on-event{
//     background-color: red;
//   }
// }
// @example css - CSS output
// .foo:hover, .foo:active, .foo:focus {
//   background-color: red;
// }
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

// @desc - 背景画像のベースを作ります。
// @example scss - Usage
// .c-image-fluid {
//   @include fluid(center, cover);
//   // 表示画像の高さ ÷ 表示画像の幅 × 100%
//   padding-top: percentage(300 / 1200);
//   background-image: url("http://lorempixel.com/1200/300/");
// }
@mixin fluid($pos: center, $size: cover) {
  height: auto;
  background-color: inherit;
  background-repeat: no-repeat;
  background-position: $pos;
  background-size: $size;
}

// @desc - class名とルールセットを指定することで、レスポンシブに対応したスタイルを生成します。
// @prop - 共通のclass名をクウォートとドットをつけて渡します（e.g. `.foo`）。
// @prop - ブレイクポイントを定義したmapを渡します。
// @see - $breakpoints
// @example scss - Usage
// @include responsive(".display-none") {
//   display: none;
// }
// @example css - CSS output
// .display-none {
//   display: none;
// }
// @media screen and (min-width: 400px) {
//   .display-none-sm {
//     display: none;
//   }
// }
@mixin responsive($class, $bp: $breakpoints) {
  #{$class} {
    @content;
  }
  @each $suffix, $value in $bp {
    @media #{$value} {
      #{$class}-#{$suffix} {
        @content;
      }
    }
  }
}

// @desc - Font Awesomeで疑似要素などに個別に指定する場合に使用します。
// @param {null} $content [null] - Unicodeを"\"で囲んで指定します。
// @param {Boolean} $adjust [true] - trueにすると日本語テキストで位置がほぼ揃います。
// @link - https://fortawesome.github.io/Font-Awesome/
// @example - .icon-arrow:before { @include create-icon("\f105"); }
@mixin create-icon($content: null, $adjust: true) {
  content: $content;
  @if($adjust == true) {
    position: relative;
    top: -0.1em;
  }
  display: inline-block;
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: FontAwesome !important;
  font-weight: normal;
  font-style: normal;
  font-variant: normal;
  line-height: 1;
  vertical-align: middle;
  text-transform: none;
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  speak: none;
}

// @desc - 表示だけをせずに、スクリーンリーダーにだけ対応したい場合に使用します。
// @prop - 引数に"important"を渡すと`!important`の指定ができます。
@mixin sr-only($important: false) {
  @if ($important == "important") {
    $important: unquote("!important");
  } @else {
    $important: null;
  }
  position: absolute $important;
  width: 1px $important;
  height: 1px $important;
  margin: -1px $important;
  border: 0 $important;
  overflow: hidden $important;
  padding: 0 $important;
  clip: rect(0, 0, 0, 0) $important;
}
