@charset "UTF-8";

/**
 * FUNCTION
 * function..........Sassの関数を定義しています。
 *
 * VARIABLE
 * global............プロジェクト全体で使用される変数を定義しています。
 * color.............色に関する変数を定義しています。
 * font..............フォントに関する変数を定義しています。
 * easing............cubic-bezier関数を使用したタイミング関数を定義しています。
 *
 * MIXIN
 * mixin.............Sassの@mixinを定義しています。
 * media-query.......メディアクエリの@mixinを定義しています。
 * grid..............グリッドレイアウトの@mixinを定義しています。
 *
 * VENDOR
 * normalize.........Normalize.cssをインポートしています。
 *
 * BASE
 * base..............タイプセレクタと属性セレクタのデフォルトスタイルです。
 *
 * LAYOUT
 * header............ヘッダーエリアのコンテナブロックのスタイルです。
 * footer............フッターエリアのコンテナブロックのスタイルです。
 * main..............コンテンツエリアのコンテナブロックのスタイルです。
 * sidebar...........サイドバーエリアのコンテナブロックのスタイルです。
 *
 * COMPONENT
 * wrapper...........最大幅を指定します。
 * grid..............グリッドレイアウトを指定します。
 * media.............画像とテキストが横並びになるコンポーネントです。
 * button............ボタンのデフォルトスタイルです。
 * embed.............Youtubeなどをレスポンシブ対応させる場合に使用します。
 *
 * PROJECT
 * icon..............アイコンフォントです。
 * breadcrumb........パンくずリストです。
 * label.............インラインのラベルです。
 *
 * UTILITY
 * text..............テキストのスタイルに関する汎用クラスです。
 * display...........要素の表示や改行をコントロールする場合に使用します。
 * width.............主にグリッドで使用する`width`を指定する汎用クラスです。
 */

/**
 * このスタイルシートは[FLOCSS](https://github.com/hiloki/flocss)をベースにしています。
 * 定義されているレイヤー以外にもThemeやScopeなどのレイヤーを追加することもできます。
 * 詳しくは[CSS Styleguide](https://github.com/manabuyasuda/styleguide/blob/master/css-styleguide.md#flocss)を参照してください。
 */

/* =============================================================================
   #Foundation
   ========================================================================== */
/**
 * FoundationレイヤーではSassの変数や関数、`html`や`body`のような広範囲にわたるベーススタイル、
 * `h2`や`ul`のような基本的なタイプセレクタのデフォルトスタイルを定義します。
 * 装飾的なスタイルは避けて、できる限り低詳細度に保ちます。id属性やclass属性は使用しません。
 */
@import "foundation/function/_function";
@import "foundation/variable/_global";
@import "foundation/variable/_color";
@import "foundation/variable/_font";
@import "foundation/variable/_easing";
@import "foundation/mixin/_mixin";
@import "foundation/mixin/_media-query";
@import "foundation/mixin/_grid";
@import "foundation/vendor/_normalize";
@import "foundation/base/_base";

/* =============================================================================
   #Layout
   ========================================================================== */
/**
 * Layoutレイヤーはヘッダーやフッターのような、ページを構成するコンテナブロックのスタイルを定義します。
 * 目安としてはワイヤーフレームに書かれるような大きな単位のブロックです。
 * 基本的にはclass属性を使用しますが、id属性を使用することもできます。
 * 汎用性のあるグリッドシステムは次のObject/Componentレイヤーで定義します。
 */
@import "layout/_header";
@import "layout/_footer";
@import "layout/_main";
@import "layout/_sidebar";

/* =============================================================================
   #Object
   ========================================================================== */
/**
 * Objectレイヤーはプロジェクトにおけるビジュアルパターンです。抽象度や詳細度、
 * 拡張性などによって、3つのレイヤーにわけられます。
 * それぞれのレイヤーにはプレフィックス（接頭辞）をつけることを推奨します。
 * 1. Component（`c-`）
 * 2. Project（`p-`またはページ名の短縮系）
 * 3. Utility（`u-`）
 *
 * ランディングページのようにページ数が少なく、影響範囲が狭い場合は、
 * Projectレイヤーのプレフィックスを省略してもいいでしょう。
 */

/* -----------------------------------------------------------------------------
   #Component
   -------------------------------------------------------------------------- */
/**
 * Componentレイヤーは多くのプロジェクトで横断的に再利用のできるような、小さな単位のモジュール（機能）です。
 * OOCSSの構造（structure）の機能を担うため、装飾的なスタイルをできるだけ含めないようにします。
 * また、`width`や`margin`といったレイアウトに影響を与えるプロパティも含めないようにします。
 * 例えばbuttonのベーススタイルやgridやmediaといったレイアウトパターンが該当します。
 */
@import "object/component/_wrapper";
@import "object/component/_grid";
@import "object/component/_media";
@import "object/component/_button";
@import "object/component/_embed";

/* -----------------------------------------------------------------------------
   #Project
   -------------------------------------------------------------------------- */
/**
 * Projectレイヤーはプロジェクト固有のパターンで、コンテンツを構成する要素です。
 * 記事の一覧やあるページにだけ使用するパターンなどで、追加するほとんどのスタイルはこのレイヤーになります。
 * もし、このレイヤーで3箇所で同じパターンが使われていたら、Componentとしてまとめられないかを検討しましょう。
 */
@import "object/project/_icon";
@import "object/project/_breadcrumb";
@import "object/project/_label";

/* -----------------------------------------------------------------------------
   #Utility
   -------------------------------------------------------------------------- */
/**
 * Utilityレイヤーはいわゆる汎用クラスで、ほとんどの場合は単一のスタイルをもっています。
 * `10px`のような絶対値を指定するより、`1rem`や`25%`のような相対値をもたせることを推奨します。
 */
@import "object/utility/_text";
@import "object/utility/_display";
@import "object/utility/_width";
